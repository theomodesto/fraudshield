openapi: 3.0.3
info:
  title: FraudShield API
  description: |
    API documentation for FraudShield fraud detection platform.
    
    This API allows merchants to evaluate transactions for fraud risk in real-time
    and provides endpoints for configuration, analytics, and transaction management.
  version: 1.0.0
  contact:
    name: FraudShield Support
    email: support@fraudshield.io
    url: https://fraudshield.io/support

servers:
  - url: https://api.fraudshield.io/v1
    description: Production server
  - url: https://api.staging.fraudshield.io/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
    
    EvaluationPayload:
      type: object
      required:
        - sessionId
        - merchantId
        - fingerprintData
      properties:
        sessionId:
          type: string
          description: Unique identifier for the user session
        merchantId:
          type: string
          description: Unique identifier for the merchant
        fingerprintData:
          type: object
          properties:
            visitorId:
              type: string
            requestId:
              type: string
            incognito:
              type: boolean
            browserName:
              type: string
            deviceType:
              type: string
            os:
              type: string
            ipLocation:
              type: object
        pageData:
          type: object
          properties:
            url:
              type: string
            referrer:
              type: string
        userAction:
          type: string
          enum: [checkout, login, signup, addToCart, pageView]
        timestamp:
          type: number
          description: Unix timestamp in milliseconds
    
    EvaluationResult:
      type: object
      required:
        - riskScore
        - isFraud
        - evaluationId
      properties:
        riskScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Risk score from 0 (safe) to 100 (high risk)
        isFraud:
          type: boolean
          description: Whether the transaction is considered fraudulent
        evaluationId:
          type: string
          format: uuid
          description: Unique identifier for this evaluation
        requiresCaptcha:
          type: boolean
          description: Whether a CAPTCHA challenge is required
        captchaSiteKey:
          type: string
          description: Site key for CAPTCHA integration when required
    
    Decision:
      type: object
      required:
        - orderId
        - riskScore
        - isFraud
        - recommendation
        - evaluationId
      properties:
        orderId:
          type: string
          description: E-commerce platform order identifier
        riskScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Risk score from 0 (safe) to 100 (high risk)
        isFraud:
          type: boolean
          description: Whether the transaction is considered fraudulent
        recommendation:
          type: string
          enum: [approve, reject, review]
          description: Recommended action for this transaction
        evaluationId:
          type: string
          format: uuid
          description: Unique identifier for the evaluation
        timestamp:
          type: number
          description: Unix timestamp in milliseconds
    
    MerchantConfig:
      type: object
      properties:
        riskThreshold:
          type: integer
          minimum: 0
          maximum: 100
          description: Threshold above which transactions are considered fraudulent
        enableCaptcha:
          type: boolean
          description: Whether to enable CAPTCHA challenges
        captchaThreshold:
          type: integer
          minimum: 0
          maximum: 100
          description: Threshold above which CAPTCHA challenges are triggered
        ipAnonymization:
          type: boolean
          description: Whether to anonymize IP addresses for GDPR compliance
        webhookUrl:
          type: string
          format: uri
          description: URL for webhook notifications
        notificationEmail:
          type: string
          format: email
          description: Email for fraud alert notifications
    
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        merchantId:
          type: string
          format: uuid
        orderId:
          type: string
        sessionId:
          type: string
        evaluationId:
          type: string
          format: uuid
        fingerprintVisitorId:
          type: string
        riskScore:
          type: integer
          minimum: 0
          maximum: 100
        isFraud:
          type: boolean
        riskFactors:
          type: array
          items:
            type: string
        pageData:
          type: object
          properties:
            url:
              type: string
            referrer:
              type: string
        userAction:
          type: string
        geoData:
          type: object
          properties:
            country:
              type: string
            city:
              type: string
            isp:
              type: string
        decision:
          type: string
          enum: [approve, reject, review]
        reviewStatus:
          type: string
          enum: [pending, approved, rejected]
        reviewedAt:
          type: string
          format: date-time
        reviewedBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    TransactionsList:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          type: object
          properties:
            total:
              type: integer
            page:
              type: integer
            pageSize:
              type: integer
            totalPages:
              type: integer
    
    Rule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        merchantId:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        conditions:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              operator:
                type: string
                enum: [eq, neq, gt, gte, lt, lte, contains, not_contains, in, not_in]
              value:
                type: object
        action:
          type: string
          enum: [flag, block, challenge]
        riskScoreAdjustment:
          type: integer
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    
    AuthResult:
      type: object
      required:
        - accessToken
        - refreshToken
        - expiresIn
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Expiration time in seconds
        user:
          type: object
          properties:
            id:
              type: string
              format: uuid
            email:
              type: string
              format: email
            firstName:
              type: string
            lastName:
              type: string
            role:
              type: string
    
    AnalyticsSummary:
      type: object
      properties:
        totalTransactions:
          type: integer
        flaggedTransactions:
          type: integer
        blockedTransactions:
          type: integer
        averageRiskScore:
          type: number
        conversionImpact:
          type: number
          description: Estimated impact on conversion rate
        topRiskFactors:
          type: array
          items:
            type: object
            properties:
              factor:
                type: string
              count:
                type: integer
              percentage:
                type: number
    
    FingerprintOptions:
      type: object
      properties:
        debug:
          type: boolean
          description: Enable debug logging for fingerprinting
        cacheExpiration:
          type: number
          description: Time in milliseconds until the fingerprint cache expires (default 24h)
        enabledSignals:
          type: object
          properties:
            canvas:
              type: boolean
              default: true
            webgl:
              type: boolean
              default: true
            audio:
              type: boolean
              default: true
            fonts:
              type: boolean
              default: true
            incognito:
              type: boolean
              default: true

paths:
  /evaluate:
    post:
      summary: Evaluate a transaction for fraud risk
      description: Analyzes device fingerprinting data and user behavior to assess fraud risk
      operationId: evaluateTransaction
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationPayload'
      responses:
        '200':
          description: Successful evaluation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResult'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /decision/{orderId}:
    get:
      summary: Get decision for an order
      description: Returns the fraud decision for a specific order ID
      operationId: getOrderDecision
      security:
        - ApiKeyAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Decision'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns JWT tokens for dashboard access
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/refresh:
    post:
      summary: Refresh authentication token
      description: Obtains a new access token using a refresh token
      operationId: refreshToken
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Successful token refresh
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /config:
    get:
      summary: Get merchant configuration
      description: Returns the current configuration settings for the merchant
      operationId: getMerchantConfig
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantConfig'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update merchant configuration
      description: Updates the configuration settings for the merchant
      operationId: updateMerchantConfig
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MerchantConfig'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantConfig'
        '400':
          description: Invalid configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /transactions:
    get:
      summary: List transactions
      description: Returns a paginated list of transactions with optional filtering
      operationId: listTransactions
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: minRiskScore
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
        - name: maxRiskScore
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
        - name: isFraud
          in: query
          schema:
            type: boolean
        - name: reviewStatus
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: orderId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsList'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /transactions/{id}:
    get:
      summary: Get transaction details
      description: Returns detailed information about a specific transaction
      operationId: getTransactionDetails
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /transactions/{id}/review:
    put:
      summary: Update transaction review status
      description: Updates the review status of a transaction
      operationId: reviewTransaction
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reviewStatus
              properties:
                reviewStatus:
                  type: string
                  enum: [approved, rejected]
                notes:
                  type: string
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid review status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /analytics/summary:
    get:
      summary: Get analytics summary
      description: Returns summary analytics for the merchant's transactions
      operationId: getAnalyticsSummary
      security:
        - BearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsSummary'
        '400':
          description: Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /rules:
    get:
      summary: List rules
      description: Returns the list of fraud detection rules for the merchant
      operationId: listRules
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  rules:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rule'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create rule
      description: Creates a new fraud detection rule
      operationId: createRule
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '201':
          description: Rule created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          description: Invalid rule definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /rules/{id}:
    get:
      summary: Get rule details
      description: Returns detailed information about a specific rule
      operationId: getRuleDetails
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update rule
      description: Updates an existing fraud detection rule
      operationId: updateRule
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
      responses:
        '200':
          description: Rule updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          description: Invalid rule definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete rule
      description: Deletes an existing fraud detection rule
      operationId: deleteRule
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Rule deleted successfully
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'